/*jslint node: true, regexp: true */
'use strict';

var crypto = require('crypto'),
    fs = require('fs'),
    path = require('path'),
    buildDir = 'www-built',
	buildJsName = "app.js",
    pagesDir = '../WpfJsInterop-GHPages';


module.exports = {

	clean: {
		summary: "removes '" + buildDir + "' directory.",
		run: [
			'v.rm ' + buildDir
		]
	},

    //Builds the JS and CSS into one file each. If you want to do
    //dynamic loading of scripts, pass -dynamic to the build, and
    //require.js will be used to load scripts.
    build: {
        flags: {
            //Does not print the build output.
            'q': 'quiet',
            //Uses dynamic loading via require.js instead of building
            //all the modules in with almond.
            'dynamic': 'dynamic'
        },

        run: function (d, v, namedArgs) {
            var q = v.require('q');

            q.call(function () {
                //Remove the old dir
                v.rm(buildDir);

                if (!namedArgs.dynamic) {
                    //Copy the directory for output.
                    v.copyDir('www', buildDir);

                    //Remove the js dir from the built area, will be
                    //replaced by an optimized app.js
                    v.rm(buildDir + '/js');
                }
                return undefined;
            })
                .then(function () {
                    //JS go time
                    var optimize = namedArgs.optimize || 'uglify2';

                    if (namedArgs.dynamic) {
                        //Still use require.js to load the app.js file.
                        return v.spawn('node', ['tools/r.js', '-o',
	                                    'appDir=www',
	                                    'paths.app=../app',
	                                    'name=app',
	                                    'mainConfigFile=www/app.js',
                                        'generateSourceMaps=true',
                                        'preserveLicenseComments=false',
                                        'dir=' + buildDir,
                                        'optimize=' + optimize], {
                            useConsole: !namedArgs.quiet
                        });
                    } else {
                        //The all-in-one option.
                        return v.spawn('node', ['tools/r.js', '-o',
	                                    'mainConfigFile=www/app.js',
                                        'paths.app=../app',
                                        'generateSourceMaps=true',
                                        'preserveLicenseComments=false',
                                        'paths.almond=../../tools/almond',
                                        'name=almond',
                                        'include=app',
                                        'out=' + buildDir + "/" + buildJsName,
                                        'optimize=' + optimize], {
                            useConsole: !namedArgs.quiet
                        });
                    }
                })
                .then(function (buildOutput) {
                    //Remove all the CSS except for the app.css, since it
                    //inlines all the other ones.
                    v.getFilteredFileList(buildDir + '/css').forEach(function (path) {
                        if (!/app\.css$/.test(path)) {
                            v.rm(path);
                        }
                    });

                    //If almond is in use, it is built into app.js, so need
                    //to update the script tag to just load app.js instead.
                    if (!namedArgs.dynamic) {
                        var indexName = buildDir + '/index.html',
                            contents = v.read(indexName),
                            scriptRegExp = /(<script[^>]+data-main="[^"]+"[^>]+)(src="[^"]+")([^>]+>\s*<\/script>)/;

                        contents = contents.replace(scriptRegExp,
                            function (match, pre, script, post) {
                                return pre + 'src="' + buildJsName + '"' + post;
                            });

                        v.write(indexName, contents);
                    }
                    return buildOutput;
                })
                .then(function (buildOutput) {
                    d.resolve(buildOutput);
                }, d.reject);
        }
    },

    //Deploys the code to github pages.
    deploy: require('volo-ghdeploy')(buildDir, pagesDir)
};
